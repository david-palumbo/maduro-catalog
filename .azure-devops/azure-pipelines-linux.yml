# ASP.NET Core

# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Debug(Linux)'

steps:

- task: UseDotNet@2
  displayName: 'Use .NET Core sdk'
  enabled: false
  inputs:
    packageType: sdk
    version: 3.0.100
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'david-palumbo'
    organization: 'david-palumbo-github'
    scannerMode: 'MSBuild'
    projectKey: 'david-palumbo_maduro-catalog'
    projectName: 'maduro-catalog'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    arguments: '--configuration $(BuildConfiguration)'
    projects: 'src/Maduro.Catalog.sln'
  displayName: 'Build Solution'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
    projects: 'src/Maduro.Catalog.sln'
  displayName: '.NET Core Tests'

- script: |
    dotnet tool install -g dotnet-reportgenerator-globaltool
    reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(CoverageOutput) -reporttypes:'HtmlInline_AzurePipelines;Cobertura' -assemblyFilters:-xunit*.*
  displayName: 'Generate Code Coverage Report'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(CoverageOutput)/Cobertura.xml'
    reportDirectory: '$(CoverageOutput)'
  displayName: 'Publish Code Coverage Report'

- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: false
  displayName: "Publish API"

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)/.azure-devops'
    Contents: 'Dockerfile'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'Artifacts'
    publishLocation: 'Container'
  displayName: 'Publish Build Artifacts'

- task: SonarCloudAnalyze@1

- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'

- task: Docker@2
  inputs:
    containerRegistry: 'Docker Hub'
    repository: 'davidpalumbo/maduro-catalog'
    command: 'buildAndPush'
    Dockerfile: '$(Build.ArtifactStagingDirectory)/Dockerfile'
  displayName: "Push Docker Image"

